/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EHView123;

import EHRegistration.EHReg;
import EHUpdateForm.EHUForm;
import static EHUpdateForm.EHUForm.EIT;
import static EHView123.EHView.EL;
//import EHView123.TableRowDemo;
import EventLoginPage123.EloginPage;
import LogOutPage.LogOut;
import Request.Req;
import static Request.Req.ReqTable;
import static com.sun.management.jmx.Trace.isSelected;
import com.sun.prism.paint.Color;
import java.awt.Component;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;

/**
 *
 * @author ARFAH
 */
public class EHView extends javax.swing.JFrame {
    /**
     * Creates new form EHView
     */
    public EHView() {
        initComponents(); 
        show_user();
           /*EHTable.setDefaultRenderer(Object.class, new MyTableCellRenderer());
    EHTable.addComponentListener(new ComponentAdapter()
            {
        public void componentResized(ComponentEvent e)
        {
            EHTable.scrollRectToVisible(EHTable.getCellRect(EHTable.getRowCount() - 1, 0, true));
        }
            });*/
    }
    int randomCode;
    public static int gm;
    public static int count;
public static int val;
    public ArrayList<User> userList() {
    ArrayList<User> userList = new ArrayList<>();
     try
               {
                   EIDL.setText(EventLoginPage123.EloginPage.EventIDTF.getText()+" -");
                    EventNameL.setText(EventLoginPage123.EloginPage.EventIDTF.getText());
                   // Class.forName("oracle.jdbc.driver.OracleDriver");
                    Connection con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/MiniProject","postgres","**********");
 
                   String sql="Select student_table.*, register_table.money_given, register_table.group_id\n" +
"from student_table inner join register_table\n" +
"on student_table.prn=register_table.prn\n" +
"and '" +  EloginPage.EventIDTF.getText() + "'=register_table.event_id ORDER BY group_id; ";
                    // JOptionPane.showMessageDialog(null,  sql );
System.out.println(sql);
 //JOptionPane.showMessageDialog(null,  EloginPage.EventIDTF.getText() );
                    Statement ps =con.createStatement();
                    ResultSet rs = ps.executeQuery(sql);
                   User user;
                   while(rs.next()) {
                        user=new User(rs.getString("prn" ),rs.getString("name" ),rs.getString("phone_number" ),rs.getString("e_mail" ),rs.getString("branch" ),rs.getString("year" ),rs.getString("money_given" ),rs.getString("group_id"));
                        userList.add(user);  
                   }
               }
 catch(Exception e) {
               JOptionPane.showMessageDialog(null, e);
         }
         return userList;
    }
   
    public void show_user() {
    ArrayList<User> list = userList();
        DefaultTableModel model= (DefaultTableModel) EHTable.getModel();
        Object [] row = new Object[9];
    for(int i=0;i<list.size();i++){
     row[0]=i+1;   
     row[1]=list.get(i).getgrp_id();
     row[2]=list.get(i).getprn();
     row[3]=list.get(i).getname();
     row[4]=list.get(i).getphone_number();
     row[5]=list.get(i).gete_mail();
     row[6]=list.get(i).getbranch();
     row[7]=list.get(i).getyear();
     row[8]=list.get(i).getmoney_given();

     model.addRow(row);
    }
    }
 
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        EIDL = new javax.swing.JLabel();
        LogoutB = new javax.swing.JButton();
        EL = new javax.swing.JLabel();
        EventNameL = new javax.swing.JLabel();
        InsertB = new javax.swing.JButton();
        UpdateB = new javax.swing.JButton();
        BranchTextF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        YearTextF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        DeleteB = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        PhoneTextF = new javax.swing.JTextField();
        E_mailTextF = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        EHTable = new javax.swing.JTable();
        NameTextF = new javax.swing.JTextField();
        PRNTextF = new javax.swing.JTextField();
        YESRB = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        RefreshB = new javax.swing.JButton();
        GrpTF = new javax.swing.JTextField();
        MGTextF = new javax.swing.JTextField();
        ReqB = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LogoutB.setText("Log Out");
        LogoutB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutBActionPerformed(evt);
            }
        });

        EL.setText("Enter existing Group ID");

        EventNameL.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                EventNameLAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        InsertB.setText("Insert");
        InsertB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertBActionPerformed(evt);
            }
        });

        UpdateB.setText("Update Event Info");
        UpdateB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBActionPerformed(evt);
            }
        });

        BranchTextF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BranchTextFActionPerformed(evt);
            }
        });

        jLabel4.setText("E-mail");

        jLabel7.setText("Money Given");

        jLabel2.setText("Name");

        jLabel5.setText("Branch");

        DeleteB.setText("Delete");
        DeleteB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBActionPerformed(evt);
            }
        });

        jLabel1.setText("PRN");

        PhoneTextF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PhoneTextFActionPerformed(evt);
            }
        });

        E_mailTextF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                E_mailTextFActionPerformed(evt);
            }
        });

        jLabel8.setText("Welcome");

        jLabel9.setText("Is this a new group?");

        EHTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S. No.", "Group ID", "PRN", "Name", "Phone", "E-mail", "Branch", "Year", "Money Given"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        EHTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EHTableMouseClicked(evt);
            }
        });
        EHTable.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                EHTableInputMethodTextChanged(evt);
            }
        });
        jScrollPane1.setViewportView(EHTable);

        PRNTextF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PRNTextFActionPerformed(evt);
            }
        });
        PRNTextF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                PRNTextFKeyReleased(evt);
            }
        });

        YESRB.setText("Yes");
        YESRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YESRBActionPerformed(evt);
            }
        });

        jLabel6.setText("Year");

        jLabel10.setText("Group ID:");

        jLabel3.setText("Phone No.");

        RefreshB.setText("Refresh");
        RefreshB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshBActionPerformed(evt);
            }
        });

        GrpTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GrpTFActionPerformed(evt);
            }
        });

        ReqB.setText("Requests");
        ReqB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReqBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(InsertB)
                            .addGap(85, 85, 85)
                            .addComponent(DeleteB)
                            .addGap(17, 17, 17))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel10)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(EIDL, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(28, 28, 28)
                                    .addComponent(GrpTF, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(YESRB)
                                .addComponent(jLabel9))
                            .addGap(8, 8, 8)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(MGTextF, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(7, 7, 7)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel2)
                                                .addComponent(jLabel1))
                                            .addGap(44, 44, 44)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(PRNTextF, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(NameTextF, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(ReqB)))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(PhoneTextF, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel4)
                                                    .addComponent(jLabel5)
                                                    .addComponent(jLabel6))
                                                .addGap(37, 37, 37)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(YearTextF, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(E_mailTextF, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(BranchTextF, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addGap(17, 17, 17)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(138, 138, 138)
                                    .addComponent(RefreshB))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(54, 54, 54)
                                    .addComponent(EL))))
                        .addGap(56, 56, 56)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(jLabel8)
                        .addGap(29, 29, 29)
                        .addComponent(EventNameL, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(210, 210, 210)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(UpdateB, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(LogoutB)
                                .addGap(23, 23, 23))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 918, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EventNameL, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(LogoutB)
                        .addGap(18, 18, 18)
                        .addComponent(UpdateB))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(RefreshB)
                        .addGap(33, 33, 33)
                        .addComponent(ReqB)))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(PRNTextF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(NameTextF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PhoneTextF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(E_mailTextF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(BranchTextF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(YearTextF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(MGTextF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(YESRB)
                            .addComponent(jLabel10))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(GrpTF)
                            .addComponent(EIDL, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EL))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DeleteB)
                    .addComponent(InsertB))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PRNTextFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PRNTextFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PRNTextFActionPerformed

    private void PhoneTextFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PhoneTextFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PhoneTextFActionPerformed

    private void E_mailTextFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_E_mailTextFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_E_mailTextFActionPerformed

    private void BranchTextFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BranchTextFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BranchTextFActionPerformed

    private void InsertBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertBActionPerformed
        // TODO add your handling code here:
                
if(PRNTextF.getText().equals("")||NameTextF.getText().equals("")||PhoneTextF.getText().equals("")||E_mailTextF.getText().equals("")||BranchTextF.getText().equals("")||YearTextF.getText().equals("")||MGTextF.getText().equals("")||GrpTF.getText().equals(""))
{
JOptionPane.showMessageDialog(this,"Please enter all the data");
}
else 
{
    //System.out.println("IN ELSE");
    String data[]={PRNTextF.getText(),NameTextF.getText(), PhoneTextF.getText(), E_mailTextF.getText(), BranchTextF.getText(), YearTextF.getText(), MGTextF.getText(),GrpTF.getText() };
    DefaultTableModel tblModel = (DefaultTableModel) EHTable.getModel();
    tblModel.addRow(data);
    try
                    {
                        Connection conm = DriverManager.getConnection("jdbc:postgresql://localhost:5432/MiniProject","postgres","***********");

                        String q="Select grp_members from event_table where event_id='" +EloginPage.EventIDTF.getText()+"'";
                        String sequel="Select COUNT(group_id) from register_table where event_id='"+EloginPage.EventIDTF.getText()+"' and group_id='"+ EIDL.getText()+GrpTF.getText()+ "'";

            PreparedStatement s = conm.prepareStatement(q);
            PreparedStatement sc = conm.prepareStatement(sequel);
               ResultSet r = s.executeQuery();  
                ResultSet re = sc.executeQuery();  
                   while(r.next()) {
                       gm=r.getInt("grp_members");  
                   }
                    while(re.next()) {
                        count=re.getInt("count");  
                   }
                   if(count>(gm-1))
                   {
                        DefaultTableModel model=(DefaultTableModel) EHTable.getModel();
         model.setRowCount(0);
         show_user();
                       JOptionPane.showMessageDialog(null,  "You have exceeded team member limit!");
                   }
                   else
                   {
     
     //  TableRowDemo renderer = new TableRowDemo();
          //EHTable.setDefaultRenderer(Object.class, (TableCellRenderer) renderer);
       try
            {
                         if(YESRB.isSelected())
                         {
                             try
               {
                   // Class.forName("oracle.jdbc.driver.OracleDriver");
                  System.out.println("In try" );
                    Connection con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/MiniProject","postgres","***********");
System.out.println("Connected");
                   // EloginPage.event  = EloginPage.EventIDTF.getText();
                      
System.out.println(EloginPage.EventIDTF.getText());

String query="insert into register_table(prn, event_id, money_given, group_id) values (?,  '"+EloginPage.EventIDTF.getText()+"' , ?,?)";
//String h="Select Count(prn) from request_table where prn=? and Event_id =?";
PreparedStatement ps = con.prepareStatement(query);
//PreparedStatement p = con.prepareStatement(h);
                                     //JOptionPane.showMessageDialog(null,  query );

                   // JOptionPane.showMessageDialog(null,  EloginPage.EventIDTF.getText());
               
                   ps.setString(1, PRNTextF.getText());
                   ps.setString(2, MGTextF.getText());
                   ps.setString(3, EIDL.getText() + GrpTF.getText());
                   ps.executeUpdate(); 
                  // p.setString(1,PRNTextF.getText() );
                      //                p.setString(2,EloginPage.EventIDTF.getText() );
                   //p.executeUpdate(); 
 //ResultSet rr = p.executeQuery();  
                  /*while(rr.next()) {
                      val=rr.getInt("count");  
                   }
                   if(val>0)
                           {
                               JOptionPane.showMessageDialog(null, "ERROR");*/
                               String t="Delete from request_table where prn=? and event_id=?";
                               PreparedStatement d = con.prepareStatement(t);
                                 d.setString(1,PRNTextF.getText() );
                                      d.setString(2,EloginPage.EventIDTF.getText() );
                                      d.executeUpdate(); 
                              // JOptionPane.showMessageDialog(null, t);

                               
                         //  }
                  DefaultTableModel model=(DefaultTableModel) EHTable.getModel();
         model.setRowCount(0);
         show_user();
         
                   JOptionPane.showMessageDialog(null, "Data Inserted Successfully");
                     // JOptionPane.showMessageDialog(this,"Added Data in JTable Successfully");
                  
         String m="Select prn from student_table where prn IN('"+PRNTextF.getText()+"')";
         if(m==null)
         {
                                                      JOptionPane.showMessageDialog(null,  "You haven't registered yet!" );
         }
               }
  catch(Exception e) {
              /*String sequel="Select prn from student_table s where '" +PRNTextF.getText()+"'= s.prn";
                   if (sequel==null)
                           {
                               System.out.println(PRNTextF.getText() != sequel);                                   
                           }*/
                                                  DefaultTableModel model=(DefaultTableModel) EHTable.getModel();
         model.setRowCount(0);
         show_user();
          JOptionPane.showMessageDialog(null,  e );     
              JOptionPane.showMessageDialog(null,  "Data already exists in Table" );                                
   }
                             
    
                            
                         }
                          else
                                {
                                    try
                                    {
                                    System.out.println("In else" );
                                    Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/MiniProject","postgres","*********");
                    String sql="Select group_id from register_table where event_id='"+ EloginPage.EventIDTF.getText()+"' and group_id=?";
                                PreparedStatement c = conn.prepareStatement(sql);
                               c.setString(1, EIDL.getText()+GrpTF.getText());
                               //JOptionPane.showMessageDialog(null,  sql );      
                                 ResultSet rs=c.executeQuery();
                                 if(rs.next())
                                 {
                                        /*while(rs.next())
                            
                                {
                                    System.out.println("In if1" );
                                String d=rs.getString("group_id");
                                System.out.println(d);
                                if(GrpTF.getText().equals(d))
                                {
                                    System.out.println("In if" );
                                   */
                                     
                                 String d=rs.getString("group_id");
                                System.out.println(d);
                               // JOptionPane.showMessageDialog(null,  d );      
                                if((EIDL.getText()+GrpTF.getText()).equals(d))
                                {
                                     try
               {
                   // Class.forName("oracle.jdbc.driver.OracleDriver");
                  System.out.println("In try" );
                    Connection con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/MiniProject","postgres","*********");
System.out.println("Connected");
                   // EloginPage.event  = EloginPage.EventIDTF.getText();
                      
System.out.println(EloginPage.EventIDTF.getText());


String query="insert into register_table(prn, event_id, money_given, group_id) values (?,  '"+EloginPage.EventIDTF.getText()+"' , ?,?)";
   //          String h="Select Count(prn) from request_table where prn=? and Event_id =?";

PreparedStatement ps = con.prepareStatement(query);
//PreparedStatement p = con.prepareStatement(h);
                                     //JOptionPane.showMessageDialog(null,  query );

                   // JOptionPane.showMessageDialog(null,  EloginPage.EventIDTF.getText());
               
                   ps.setString(1, PRNTextF.getText());
                   ps.setString(2, MGTextF.getText());
                   ps.setString(3, EIDL.getText()+GrpTF.getText());
                   ps.executeUpdate();    
    /*                 p.setString(1,PRNTextF.getText() );
                                      p.setString(2,EloginPage.EventIDTF.getText() );
                   p.executeUpdate(); 
 ResultSet rr = p.executeQuery();  
                 //  while(rr.next()) {
                       val=rr.getInt("count");  
                  // }
                   if(val>0)
                           {
                               String t="Delete from request_table where prn=? and event_id=?";
                               PreparedStatement k = con.prepareStatement(t);
                                 k.setString(1,PRNTextF.getText() );
                                      k.setString(2,EloginPage.EventIDTF.getText() );

                               
                           }*/
                  DefaultTableModel model=(DefaultTableModel) EHTable.getModel();
         model.setRowCount(0);
         show_user();
                   JOptionPane.showMessageDialog(null, "Data Inserted in Database Successfully");
                      JOptionPane.showMessageDialog(this,"Added Data in JTable Successfully");
                  
         String m="Select prn from student_table where prn IN('"+PRNTextF.getText()+"')";
         if(m==null)
         {
                                                      JOptionPane.showMessageDialog(null,  "You haven't registered yet!" );
         }
               }
  catch(Exception e) {
              /*String sequel="Select prn from student_table s where '" +PRNTextF.getText()+"'= s.prn";
                   if (sequel==null)
                           {
                               System.out.println(PRNTextF.getText() != sequel);                                   
                           }*/
                                                  DefaultTableModel model=(DefaultTableModel) EHTable.getModel();
         model.setRowCount(0);
         show_user();
         DefaultTableModel modl=(DefaultTableModel) EHTable.getModel();
         model.setRowCount(0);
         show_user();
                  // JOptionPane.showMessageDialog(null, "Data Inserted in Successfully");
                      //JOptionPane.showMessageDialog(this,"Added Data in JTable Successfully");
                  
         String m="Select prn from student_table where prn IN('"+PRNTextF.getText()+"')";
         if(m==null)
         {
                                                      JOptionPane.showMessageDialog(null,  "You haven't registered yet!" );
         }
        // JOptionPane.showMessageDialog(null,  e );   
             JOptionPane.showMessageDialog(null,  "Data already exists in Table" );                                
   }
                                
                                /*else 
                                {
                                   DefaultTableModel model=(DefaultTableModel) EHTable.getModel();
         model.setRowCount(0);
         show_user();
                                }*/
                                }
                                
                                 }
                                 else
                                {
                                      DefaultTableModel model=(DefaultTableModel) EHTable.getModel();
         model.setRowCount(0);
         show_user();
                                     JOptionPane.showMessageDialog(null, "Group Id doesn't exist!!!!"); 
                                }
                                    
                                    }
                                   catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }  
                                              
                                }
            }

                                        
            
             catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }    
                   }
                   }
                 
             catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }       
                    

    PRNTextF.setText("");
    NameTextF.setText("");
    PhoneTextF.setText("");
    E_mailTextF.setText("");
    BranchTextF.setText("");
    YearTextF.setText("");
    MGTextF.setText("");
    GrpTF.setText("");
    
}

   
    }//GEN-LAST:event_InsertBActionPerformed
 
    private void UpdateBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBActionPerformed
        // TODO add your handling code here:
          try
      {
       EHUForm menu= new EHUForm();
                        menu.setVisible(true);
                        setVisible(false);
                           EIT.setText(EventLoginPage123.EloginPage.EventIDTF.getText());
      }
      catch(Exception e) {
               JOptionPane.showMessageDialog(null, e);
         }
    }//GEN-LAST:event_UpdateBActionPerformed

    private void DeleteBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBActionPerformed
        // TODO add your handling code here:
            if(EHTable.getRowCount()==0){
                JOptionPane.showMessageDialog(this,"The table is empty.");
             }
             else{
        if(PRNTextF.getText().equals("")||NameTextF.getText().equals("")||PhoneTextF.getText().equals("")||E_mailTextF.getText().equals("")||BranchTextF.getText().equals("")||YearTextF.getText().equals("")||GrpTF.getText().equals(""))
{
JOptionPane.showMessageDialog(this,"Please select the row you want to delete.");
}
       
            else{
                   //JOptionPane.showMessageDialog(this,"Please select the row you want to delete.");
                       int opt= JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this entry?", "Delete", JOptionPane.YES_NO_OPTION);
        if(opt==1)
        {
                DefaultTableModel model=(DefaultTableModel) EHTable.getModel();
         model.setRowCount(0);
         show_user();
        }
        else
        {
            try{
                EHTable.getSelectedRow();
                 EHTable.clearSelection();
                     Connection con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/MiniProject","postgres","********");
 
                 String sql="Delete from register_table where prn= ? and event_id='"+EloginPage.EventIDTF.getText()+"' and group_id=?";
                                PreparedStatement pst = con.prepareStatement(sql);
                pst=con.prepareStatement(sql);
                pst.setString(1, PRNTextF.getText());
                    pst.setString(2, GrpTF.getText());
                pst.executeUpdate();
                DefaultTableModel model=(DefaultTableModel) EHTable.getModel();
         model.setRowCount(0);
         show_user();
                                   JOptionPane.showMessageDialog(this,"Data deleted successfully.");
            }
            catch(Exception e) {
               JOptionPane.showMessageDialog(null, e);
         }
                }
            }
        }

        
    }//GEN-LAST:event_DeleteBActionPerformed

    private void EHTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EHTableMouseClicked
        // TODO add your handling code here:
        int i=EHTable.getSelectedRow();
        TableModel model=EHTable.getModel();
        GrpTF.setText(model.getValueAt(i, 1).toString());
        PRNTextF.setText(model.getValueAt(i, 2).toString());
                NameTextF.setText(model.getValueAt(i, 3).toString());
                        PhoneTextF.setText(model.getValueAt(i, 4).toString());
        E_mailTextF.setText(model.getValueAt(i, 5).toString());
        BranchTextF.setText(model.getValueAt(i, 6).toString());
        YearTextF.setText(model.getValueAt(i, 7).toString());
        MGTextF.setText(model.getValueAt(i, 8).toString());

    }//GEN-LAST:event_EHTableMouseClicked

    private void RefreshBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshBActionPerformed
        // TODO add your handling code here:
         DefaultTableModel model=(DefaultTableModel) EHTable.getModel();
         model.setRowCount(0);
         show_user();
         PRNTextF.setText("");
    NameTextF.setText("");
    PhoneTextF.setText("");
    E_mailTextF.setText("");
    BranchTextF.setText("");
    YearTextF.setText("");
    MGTextF.setText("");
       GrpTF.setText("");
    }//GEN-LAST:event_RefreshBActionPerformed

    private void LogoutBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutBActionPerformed
        // TODO add your handling code here:
         try
        {
           LogOut menu= new LogOut();
            menu.setVisible(true);
            setVisible(false);
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_LogoutBActionPerformed

    private void PRNTextFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PRNTextFKeyReleased
        // TODO add your handling code here:
        try
        {
                    Connection con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/MiniProject","postgres","***********");
                    String sql="Select * from student_table where prn=?";
                                PreparedStatement s = con.prepareStatement(sql);
                                s.setString(1, PRNTextF.getText());
                                 ResultSet rs=s.executeQuery();
                            if(rs.next())
                            {
                                {
                                String name=rs.getString("name");
                                NameTextF.setText(name);
                                 String branch=rs.getString("branch");
                                BranchTextF.setText(branch);
                                 String year=rs.getString("year");
                                YearTextF.setText(year);
                                 String number=rs.getString("phone_number");
                                PhoneTextF.setText(number);
                                 String mail=rs.getString("e_mail");
                                E_mailTextF.setText(mail);
                                
                            }

                            }
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_PRNTextFKeyReleased

    private void EventNameLAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_EventNameLAncestorAdded
        // TODO add your handling code here:
       
    }//GEN-LAST:event_EventNameLAncestorAdded

    private void EHTableInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_EHTableInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_EHTableInputMethodTextChanged

    private void YESRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YESRBActionPerformed
        // TODO add your handling code here:
 if(YESRB.isSelected())
    {
        EL.setVisible(false);
        Random rand=new Random();
       randomCode=rand.nextInt(999);
        String str1 = Integer.toString(randomCode);
       GrpTF.setText(str1);
           
        
    }
    else
    {
          EL.setVisible(true);
            GrpTF.setText("");
            
    }
    }//GEN-LAST:event_YESRBActionPerformed

    private void ReqBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReqBActionPerformed
        // TODO add your handling code here:
      
                try
      {
            
       Req menu= new Req();
                        menu.setVisible(true);
                        setVisible(false);
                           //EIT.setText(EventLoginPage123.EloginPage.EventIDTF.getText());
                           
                           
      }
      catch(Exception e) {
               JOptionPane.showMessageDialog(null, e);
         }
    }//GEN-LAST:event_ReqBActionPerformed

    private void GrpTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GrpTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GrpTFActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EHView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EHView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EHView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EHView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EHView().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BranchTextF;
    private javax.swing.JButton DeleteB;
    public static javax.swing.JTable EHTable;
    private javax.swing.JLabel EIDL;
    public static javax.swing.JLabel EL;
    private javax.swing.JTextField E_mailTextF;
    private javax.swing.JLabel EventNameL;
    public static javax.swing.JTextField GrpTF;
    private javax.swing.JButton InsertB;
    private javax.swing.JButton LogoutB;
    private javax.swing.JTextField MGTextF;
    private javax.swing.JTextField NameTextF;
    public static javax.swing.JTextField PRNTextF;
    private javax.swing.JTextField PhoneTextF;
    private javax.swing.JButton RefreshB;
    private javax.swing.JButton ReqB;
    private javax.swing.JButton UpdateB;
    private javax.swing.JRadioButton YESRB;
    private javax.swing.JTextField YearTextF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

/*public void changeTable(JTable table, int column_index)
{
EHTable.getColumnModel().getColumn(column_index).setCellRenderer(new DefaultCellRenderer() 
{
public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
{
final Component c= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
String st_val=EHTable.getValueAt(row, 2).toString();
if(count<(gm-1))
            {
                c.setBackground(java.awt.Color.YELLOW);
                        c.setForeground(java.awt.Color.RED);
                       
        }
        
return c;
}
});
}
}
class MyTableCellRenderer extends DefaultTableCellRenderer 
{
    @Override
    public java.awt.Color getBackground()
    {
        return super.getBackground();
    }*/
}

